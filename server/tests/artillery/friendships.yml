config:
  target: 'http://localhost:3000'
  http:
    timeout: 10 # max 10 seconds before considering a request as timed out
  plugins:
    expect: {outputFormat: 'pretty'}
  phases:
    - duration: 1
      arrivalCount: 1
  defaults:
    headers:
      Content-Type: "application/json"
scenarios:
  - name: "Logins"
    flow:
    - post:
        name: "Login Ben"
        url: "/graphql"
        json:
          operationName: null
          query: 'mutation {login(username: "ben@platform5.ch", password: "admin") {token, expires, userId}}'
          variables: '{}'
        capture:
          - json: "$"
            as: "response"
          - json: "$.data.login.token"
            as: "benToken"
          - json: "$.data.login.userId"
            as: "benUserId"
        expect:
          - statusCode: 200
    - post:
        name: "Login Chantal"
        url: "/graphql"
        json:
          operationName: null
          query: 'mutation {login(username: "chantal@girardet.ch", password: "admin") {token, expires, userId}}'
          variables: '{}'
        capture:
          - json: "$"
            as: "response"
          - json: "$.data.login.token"
            as: "chantalToken"
          - json: "$.data.login.userId"
            as: "chantalUserId"
        expect:
          - statusCode: 200
    - post:
        name: "Login Thomas"
        url: "/graphql"
        json:
          operationName: null
          query: 'mutation {login(username: "thomas@platform5.ch", password: "admin") {token, expires, userId}}'
          variables: '{}'
        capture:
          - json: "$"
            as: "response"
          - json: "$.data.login.token"
            as: "thomasToken"
          - json: "$.data.login.userId"
            as: "thomasUserId"
        expect:
          - statusCode: 200
    - post:
        name: "Ben request friendship with Chantal"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {requestFriendship(friendId: "{{ chantalUserId }}") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.requestFriendship.id"
              as: "friendshipBenChantalId"
        expect:
            - statusCode: 200
            - hasProperty: "data.requestFriendship"
            - hasProperty: "data.requestFriendship.id"
            - hasProperty: "data.requestFriendship.status"
            - equals:
                - "{{ data.requestFriendship.status }}"
                - "requested"
    - post:
        name: "Ben request friendship with Chantal (again, should error)"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {requestFriendship(friendId: "{{ chantalUserId }}") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.errors"
              as: "errors"
        expect:
            - statusCode: 200
            - hasProperty: "errors[0].message"
            - equals:
                - "{{ errors[0].message }}"
                - "Friendship request already exists"
    - post:
        name: "Chantal request friendship with Ben (should error)"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {requestFriendship(friendId: "{{ benUserId }}") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.errors"
              as: "errors"
        expect:
            - statusCode: 200
            - hasProperty: "errors[0].message"
            - equals:
                - "{{ errors[0].message }}"
                - "Friendship request already exists"
    - post:
        name: "Chantal sends an invalid response"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {respondToFriendshipRequest(friendshipId: "{{ friendshipBenChantalId }}", response: "xxx") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.errors"
              as: "errors"
        expect:
            - statusCode: 200
            - hasProperty: "errors[0].message"
            - equals:
                - "{{ errors[0].message }}"
                - "Invalid request"
    - post:
        name: "Chantal declines Ben request"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {respondToFriendshipRequest(friendshipId: "{{ friendshipBenChantalId }}", response: "declined") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.respondToFriendshipRequest"
            - hasProperty: "data.respondToFriendshipRequest.id"
            - hasProperty: "data.respondToFriendshipRequest.status"
            - equals:
                - "{{ data.respondToFriendshipRequest.status }}"
                - "declined"
    - post:
        name: "Ben request friendship with Chantal"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {requestFriendship(friendId: "{{ chantalUserId }}") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.requestFriendship.id"
              as: "friendshipBenChantalId"
        expect:
            - statusCode: 200
            - hasProperty: "data.requestFriendship"
            - hasProperty: "data.requestFriendship.id"
            - hasProperty: "data.requestFriendship.status"
            - equals:
                - "{{ data.requestFriendship.status }}"
                - "requested"
    - post:
        name: "Chantal accepts Ben request"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {respondToFriendshipRequest(friendshipId: "{{ friendshipBenChantalId }}", response: "accepted") {id, status}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.respondToFriendshipRequest.id"
              as: "friendshipBenChantalId"
        expect:
            - statusCode: 200
            - hasProperty: "data.respondToFriendshipRequest"
            - hasProperty: "data.respondToFriendshipRequest.id"
            - hasProperty: "data.respondToFriendshipRequest.status"
            - equals:
                - "{{ data.respondToFriendshipRequest.status }}"
                - "accepted"
    - post:
        name: "Chantal removes friendship with Ben"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {removeFriendship(friendshipId: "{{ friendshipBenChantalId }}")}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.removeFriendship"
            - equals:
                - "{{ data.removeFriendship }}"
                - true
