config:
  target: 'http://localhost:3000'
  http:
    timeout: 10 # max 10 seconds before considering a request as timed out
  plugins:
    expect: {outputFormat: 'pretty'}
  phases:
    - duration: 1
      arrivalCount: 1
  defaults:
    headers:
      Content-Type: "application/json"
scenarios:
  - name: "Logins"
    flow:
    - post:
        name: "Login Ben"
        url: "/graphql"
        json:
          operationName: null
          query: 'mutation {login(username: "ben@platform5.ch", password: "admin") {token, expires, userId}}'
          variables: '{}'
        capture:
          - json: "$"
            as: "response"
          - json: "$.data.login.token"
            as: "benToken"
        expect:
          - statusCode: 200
          - hasProperty: "data.login"
          - hasProperty: "data.login.token"
          - hasProperty: "data.login.expires"
          - hasProperty: "data.login.userId"
    - post:
        name: "Login Chantal"
        url: "/graphql"
        json:
          operationName: null
          query: 'mutation {login(username: "chantal@girardet.ch", password: "admin") {token, expires, userId}}'
          variables: '{}'
        capture:
          - json: "$"
            as: "response"
          - json: "$.data.login.token"
            as: "chantalToken"
        expect:
          - statusCode: 200
          - hasProperty: "data.login"
    - post:
        name: "Login Thomas"
        url: "/graphql"
        json:
          operationName: null
          query: 'mutation {login(username: "thomas@platform5.ch", password: "admin") {token, expires, userId}}'
          variables: '{}'
        capture:
          - json: "$"
            as: "response"
          - json: "$.data.login.token"
            as: "thomasToken"
        expect:
          - statusCode: 200
          - hasProperty: "data.login"
    - post:
        name: "Get Ben user"
        url: "/graphql"
        json:
          operationName: null
          query: 'query {users(search: "ben@platform5.ch") {id}}'
          variables: '{}'
        headers:
          Authorization: "Bearer {{ benToken }}"
        capture:
          - json: "$"
            as: "response"
          - json: "data.users.0.id"
            as: "benId"
        expect:
          - statusCode: 200
          - hasProperty: "data.users.0.id"
    - post:
        name: "Get Chantal user"
        url: "/graphql"
        json:
          operationName: null
          query: 'query {users(search: "chantal@girardet.ch") {id}}'
          variables: '{}'
        headers:
          Authorization: "Bearer {{ benToken }}"
        capture:
          - json: "$"
            as: "response"
          - json: "data.users.0.id"
            as: "chantalId"
        expect:
          - statusCode: 200
          - hasProperty: "data.users.0.id"
    - post:
        name: "Get Thomas user"
        url: "/graphql"
        json:
          operationName: null
          query: 'query {users(search: "thomas@platform5.ch") {id}}'
          variables: '{}'
        headers:
          Authorization: "Bearer {{ benToken }}"
        capture:
          - json: "$"
            as: "response"
          - json: "data.users.0.id"
            as: "thomasId"
        expect:
          - statusCode: 200
          - hasProperty: "data.users.0.id"
    - post:
        name: "Get Thomas email with ben token (must return an error)"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {user(id:"{{ thomasId }}") {id, firstname, email}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        expect:
            - statusCode: 200
            - hasProperty: "errors.0.message"
    - post:
        name: "Get Thomas email with thomas token (must work)"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {user(id:"{{ thomasId }}") {id, firstname, email}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ thomasToken }}"
        capture:
            - json: "$.data.user"
              as: "user"
        expect:
            - statusCode: 200
            - hasProperty: "data.user.email"
            - equals:
                - "{{ user.email }}"
                - "thomas@platform5.ch"
    - post:
        name: "Get Thomas firstname with ben token (must work)"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {user(id:"{{ thomasId }}") {id, firstname}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data.user"
              as: "user"
        expect:
            - statusCode: 200
            - hasProperty: "data.user.firstname"
            - equals:
                - "{{ user.firstname }}"
                - "Thomas"
    - post:
        name: "Get Ben Topics"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topics {id, name, image {fileId, width, height}, shares {userId, encryptedBy, encryptedContentKey}, myShare {userId, encryptedBy, encryptedContentKey}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.topics.0.id"
              as: "firstTopicId"
        expect:
            - statusCode: 200
            - hasProperty: "data.topics.0"
            - hasProperty: "data.topics.0.shares.0.encryptedBy"
            - hasProperty: "data.topics.0.myShare"
            - hasProperty: "data.topics.0.image.0"
            # - equals:
            #     - "{{ data.topics.length }}"
            #     - 1
            - equals:
                - "{{ data.topics.0.shares.0.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.topics.0.shares.0.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.topics.0.myShare.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.topics.0.image.0.fileId }}"
                - "original"
            - equals:
                - "{{ data.topics.0.image.0.width }}"
                - 1200
            - equals:
                - "{{ data.topics.0.image.0.height }}"
                - 800
            - equals:
                - "{{ data.topics.0.image.1.fileId }}"
                - "thumb"
            - equals:
                - "{{ data.topics.0.image.1.width }}"
                - 400
            - equals:
                - "{{ data.topics.0.image.1.height }}"
                - 300
    - post:
        name: "Get First Topic Messages"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topic(id: "{{ firstTopicId }}") {id, name, messages {text}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.topic"
            - hasProperty: "data.topic.name"
            - hasProperty: "data.topic.messages"
            - hasProperty: "data.topic.messages.0.text"
            - equals:
                - "{{ data.topic.messages.length }}"
                - 2
    - post:
        name: "Create a topic with Ben"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {createTopic(data: {name: "New topic", description: "New description", color: "#ff0000", encryptedContentKey: "key", image: [{fileId: "imageFileId", width: 1200, height: 800}]}) {id, name, description, color, image {fileId, width, height}, shares {userId, encryptedBy, encryptedContentKey}, myShare {userId, encryptedBy, encryptedContentKey}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.createTopic.id"
              as: "createdTopicId"
        expect:
            - statusCode: 200
            - hasProperty: "data.createTopic"
            - hasProperty: "data.createTopic.id"
            - hasProperty: "data.createTopic.shares.0.encryptedBy"
            - hasProperty: "data.createTopic.myShare"
            - equals:
                - "{{ data.createTopic.name }}"
                - "New topic"
            - equals:
                - "{{ data.createTopic.description }}"
                - "New description"
            - equals:
                - "{{ data.createTopic.color }}"
                - "#ff0000"
            - equals:
                - "{{ data.createTopic.shares.0.encryptedContentKey }}"
                - "key"
            - equals:
                - "{{ data.createTopic.shares.0.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.createTopic.shares.0.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.createTopic.myShare.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.createTopic.image.length }}"
                - 1
            - equals:
                - "{{ data.createTopic.image.0.fileId }}"
                - "imageFileId"
            - equals:
                - "{{ data.createTopic.image.0.width }}"
                - 1200
            - equals:
                - "{{ data.createTopic.image.0.height }}"
                - 800
    - post:
        name: "Get recently created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topic(id: "{{ createdTopicId }}") {name, description, color, image {fileId, width, height}, shares {userId, encryptedBy, encryptedContentKey}, myShare {userId, encryptedBy, encryptedContentKey}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.topic"
            - hasProperty: "data.topic.shares.0.encryptedBy"
            - hasProperty: "data.topic.myShare"
            - equals:
                - "{{ data.topic.name }}"
                - "New topic"
            - equals:
                - "{{ data.topic.description }}"
                - "New description"
            - equals:
                - "{{ data.topic.color }}"
                - "#ff0000"
            - equals:
                - "{{ data.topic.shares.0.encryptedContentKey }}"
                - "key"
            - equals:
                - "{{ data.topic.shares.0.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.topic.shares.0.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.topic.myShare.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.topic.image.length }}"
                - 1
            - equals:
                - "{{ data.topic.image.0.fileId }}"
                - "imageFileId"
            - equals:
                - "{{ data.topic.image.0.width }}"
                - 1200
            - equals:
                - "{{ data.topic.image.0.height }}"
                - 800
    - post:
        name: "Edit recently created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {editTopic(id: "{{ createdTopicId }}", data: {name: "Edited Topic", description: "Edited Description", color: "#00ff00", image: [{fileId: "imageFileId2", width: 800, height: 600}]}) {name, description, color, image {fileId, width, height}, shares {userId, encryptedBy, encryptedContentKey}, myShare {userId, encryptedBy, encryptedContentKey}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.editTopic"
            - hasProperty: "data.editTopic.shares.0.encryptedBy"
            - hasProperty: "data.editTopic.myShare"
            - equals:
                - "{{ data.editTopic.name }}"
                - "Edited Topic"
            - equals:
                - "{{ data.editTopic.description }}"
                - "Edited Description"
            - equals:
                - "{{ data.editTopic.color }}"
                - "#00ff00"
            - equals:
                - "{{ data.editTopic.shares.0.encryptedContentKey }}"
                - "key"
            - equals:
                - "{{ data.editTopic.shares.0.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.editTopic.shares.0.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.editTopic.myShare.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.editTopic.image.length }}"
                - 1
            - equals:
                - "{{ data.editTopic.image.0.fileId }}"
                - "imageFileId2"
            - equals:
                - "{{ data.editTopic.image.0.width }}"
                - 800
            - equals:
                - "{{ data.editTopic.image.0.height }}"
                - 600
    - post:
        name: "Add share to recently created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {addShareToTopic(id: "{{ createdTopicId }}", data: {userId: "{{ chantalId }}", encryptedContentKey: "key for Chantal"}) {shares {userId, encryptedBy, encryptedContentKey}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.addShareToTopic"
            - hasProperty: "data.addShareToTopic.shares.0.encryptedBy"
            - equals:
                - "{{ data.addShareToTopic.shares.length }}"
                - 2
            - equals:
                - "{{ data.addShareToTopic.shares.0.encryptedContentKey }}"
                - "key"
            - equals:
                - "{{ data.addShareToTopic.shares.0.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.addShareToTopic.shares.0.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.addShareToTopic.shares.1.encryptedContentKey }}"
                - "key for Chantal"
            - equals:
                - "{{ data.addShareToTopic.shares.1.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.addShareToTopic.shares.1.userId }}"
                - "{{ chantalId }}"
    - post:
        name: "Get recently created topic with Chantal token"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topic(id: "{{ createdTopicId }}") {name, myShare {userId, encryptedBy, encryptedContentKey, role}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.topic"
            - hasProperty: "data.topic.name"
            - hasProperty: "data.topic.myShare"
            - equals:
                - "{{ data.topic.name }}"
                - "Edited Topic"
            - equals:
                - "{{ data.topic.myShare.userId }}"
                - "{{ chantalId }}"
            - equals:
                - "{{ data.topic.myShare.encryptedContentKey }}"
                - "key for Chantal"
            - equals:
                - "{{ data.topic.myShare.role }}"
                - "member"
    - post:
        name: "Try to edit recently created topic with Chantal token (must fail, share is not owner)"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {editTopic(id: "{{ createdTopicId }}", data: {name: "Edited Topic 2"}) {name}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ chantalToken }}"
        capture:
            - json: "$.errors"
              as: "errors"
        expect:
            - statusCode: 200
            - hasProperty: "errors.0.message"
            - equals:
                - "{{ errors.0.message }}"
                - "Access denied"
    - post:
        name: "Remove share to recently created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {removeShareToTopic(id: "{{ createdTopicId }}", userId: "{{ chantalId }}") {shares {userId, encryptedBy, encryptedContentKey, role}}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.removeShareToTopic"
            - hasProperty: "data.removeShareToTopic.shares.0.encryptedBy"
            - equals:
                - "{{ data.removeShareToTopic.shares.length }}"
                - 1
            - equals:
                - "{{ data.removeShareToTopic.shares.0.encryptedContentKey }}"
                - "key"
            - equals:
                - "{{ data.removeShareToTopic.shares.0.encryptedBy }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.removeShareToTopic.shares.0.userId }}"
                - "{{ benId }}"
            - equals:
                - "{{ data.removeShareToTopic.shares.0.role }}"
                - "owner"
    - post:
        name: "Create a message with Ben in the newly created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {createMessageInTopic(data: {topicId: "{{ createdTopicId }}", text: "First message here"}) {id, text}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.createMessageInTopic.id"
              as: "createdMessageId"
        expect:
            - statusCode: 200
            - hasProperty: "data.createMessageInTopic"
            - hasProperty: "data.createMessageInTopic.id"
            - hasProperty: "data.createMessageInTopic.text"
            - equals:
                - "{{ data.createMessageInTopic.text }}"
                - "First message here"
    - post:
        name: "Edit recently created message"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {editMessage(data: {id: "{{ createdMessageId }}", text: "First message here (edited)"}) {id, text}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.editMessage"
            - hasProperty: "data.editMessage.id"
            - hasProperty: "data.editMessage.text"
            - equals:
                - "{{ data.editMessage.text }}"
                - "First message here (edited)"
    - post:
        name: "Remove recently created message"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {removeMessage(id: "{{ createdMessageId }}") {id, text, deleted}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
        expect:
            - statusCode: 200
            - hasProperty: "data.removeMessage"
            - hasProperty: "data.removeMessage.id"
            - hasProperty: "data.removeMessage.text"
            - hasProperty: "data.removeMessage.deleted"
            - equals:
                - "{{ data.removeMessage.text }}"
                - ""
            - equals:
                - "{{ data.removeMessage.deleted }}"
                - true
    - post:
        name: "Create a second topic with Ben"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {createTopic(data: {name: "Second topic", description: "", color: "#ff0000", encryptedContentKey: "key"}) {id}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data"
              as: "data"
            - json: "$.data.createTopic.id"
              as: "secondTopicId"
        expect:
            - statusCode: 200
    - post:
        name: "Get Ben Topics (test sorting)"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topics(sort: {field: "updatedAt", order: -1}) {id}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data.topics"
              as: "topics"
        expect:
            - statusCode: 200
            - equals:
                - "{{ topics[0].id }}"
                - "{{ secondTopicId }}"
            - equals:
                - "{{ topics[1].id }}"
                - "{{ createdTopicId }}"
    - post:
        name: "Edit firstly created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {editTopic(id: "{{ createdTopicId }}", data: {name: "Edited Topic again"}) {id}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        expect:
            - statusCode: 200
    - post:
        name: "Get Ben Topics (test sorting 2)"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topics(sort: {field: "updatedAt", order: -1}) {id}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data.topics"
              as: "topics"
        expect:
            - statusCode: 200
            - equals:
                - "{{ topics[0].id }}"
                - "{{ createdTopicId }}"
            - equals:
                - "{{ topics[1].id }}"
                - "{{ secondTopicId }}"
    - post:
        name: "Edit firstly created topic"
        url: "/graphql"
        json:
            operationName: null
            query: 'mutation {editTopic(id: "{{ createdTopicId }}", data: {status: "archived"}) {id}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        expect:
            - statusCode: 200
    - post:
        name: "Get Ben Topics (test filter)"
        url: "/graphql"
        json:
            operationName: null
            query: 'query {topics(status: "archived") {id}}'
            variables: '{}'
        headers:
            Authorization: "Bearer {{ benToken }}"
        capture:
            - json: "$.data.topics"
              as: "topics"
        expect:
            - statusCode: 200
            - equals:
                - "{{ topics[0].id }}"
                - "{{ createdTopicId }}"
            - equals:
                - "{{ topics.length }}"
                - 1
